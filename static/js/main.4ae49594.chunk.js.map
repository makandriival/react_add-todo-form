{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","title","completed","id","cn","TodoList","todos","map","username","userId","App","useState","setTitle","userName","setUserName","isTitleEmpty","setIsTitleEmpty","isUserSelected","setIsUserSelected","retrievedUser","todosFromServer","usersFromServer","find","serverUser","setTodos","action","method","onSubmit","event","preventDefault","selectedUser","maxId","Math","max","trimedTitle","trim","type","placeholder","value","onChange","currentTarget","defaultChecked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4ae49594.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ninterface Props {\n  user: User\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    user,\n    completed,\n    id,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[]\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          todo={todo}\n          key={todo.id}\n          data-id={todo.id}\n        />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './App.scss';\nimport { FormEvent, useState } from 'react';\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types/Todo';\n\nconst retrieveUser = (): Todo[] => {\n  return todosFromServer.map(todo => {\n    const user = usersFromServer\n      .find(serverUser => serverUser.id === todo.userId) || null;\n\n    return { ...todo, user };\n  });\n};\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [userName, setUserName] = useState('');\n  const [isTitleEmpty, setIsTitleEmpty] = useState(false);\n  const [isUserSelected, setIsUserSelected] = useState(false);\n\n  const retrievedUser = retrieveUser();\n  const [todos, setTodos] = useState(retrievedUser);\n\n  const handleTitleChange = (event: FormEvent<HTMLInputElement>) => {\n    setTitle(event.currentTarget.value);\n    setIsTitleEmpty(false);\n  };\n\n  const handleUserChange = (event: FormEvent<HTMLSelectElement>) => {\n    setUserName(event.currentTarget.value);\n    setIsUserSelected(false);\n  };\n\n  const getMaxId = () => Math.max(...todos.map(todo => todo.id));\n\n  const addTodo = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const selectedUser = usersFromServer.find(user => user.name === userName);\n    const maxId = getMaxId();\n    const trimedTitle = title.trim();\n\n    if (!trimedTitle) {\n      setIsTitleEmpty(true);\n    }\n\n    if (!selectedUser) {\n      setIsUserSelected(true);\n    }\n\n    if (!trimedTitle && !selectedUser) {\n      return;\n    }\n\n    setTodos([\n      ...todos, {\n        id: maxId + 1,\n        userId: selectedUser?.id,\n        title: trimedTitle,\n        completed: false,\n        user: selectedUser || null,\n      }]);\n    setTitle('');\n    setUserName('');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={addTodo}\n      >\n        <div className=\"field\">\n          {'Title: '}\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleTitleChange}\n          />\n\n          {(isTitleEmpty) && (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            onChange={handleUserChange}\n            value={userName}\n          >\n            <option defaultChecked>Choose the user</option>\n\n            {usersFromServer.map(user => (\n              <option key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {(isUserSelected) && (\n            <span className=\"error\">\n              Please choose a user\n            </span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}